###############################################
# .env.sample – Vorlage mit Erläuterungen     #
#
# Kopiere diese Datei zu ".env" und passe sie an.
# Sensible Werte niemals committen.            #
###############################################

## Bluesky (erforderlich)
# Basis-URL des Bluesky/ATProto-Dienstes. Standard ist bsky.social.
BLUESKY_SERVER_URL=https://bsky.social
# Handle oder E-Mail, mit der sich der Bot anmeldet.
BLUESKY_IDENTIFIER=deinname.bsky.social
# App-spezifisches Passwort aus den Bluesky-Einstellungen.
BLUESKY_APP_PASSWORD=xxxx-xxxx-xxxx-xxxx

## Mastodon (optional)
# Wenn beide Werte gesetzt sind, werden Mastodon-Funktionen im Backend aktiviert.
#MASTODON_API_URL=https://mastodon.social
#MASTODON_ACCESS_TOKEN=dein_token

## Scheduler & Lokalisierung
# Serverseitige Zeitzone für den Scheduler (IANA-Format, z. B. Europe/Berlin).
TIME_ZONE=Europe/Berlin
# Clientseitige Defaults (nur fürs Frontend-Build via Vite; optional)
# In der Regel reicht TIME_ZONE/LOCALE serverseitig.
#VITE_TIME_ZONE=Europe/Berlin
#VITE_LOCALE=de-DE
# Optional: Cron-Ausdruck als Standard für den Scheduler (UI kann dies überschreiben).
# Standard im Code ist jede Minute: "* * * * *"
#SCHEDULE_TIME=* * * * *
# Demo-/Discard-Modus: Scheduler verwirft fällige Skeets/Threads (postet nicht)
# Werte: 1|true|yes aktiv, sonst false
SCHEDULER_DISCARD_MODE=false

## Zuverlässigkeit beim Posten (Server)
# Werden als Default in der Datenbank gespeichert und können über die UI überschrieben werden.
POST_RETRIES=4            # Max. Wiederholversuche bei Fehlern
POST_BACKOFF_MS=600       # Basis-Backoff in Millisekunden
POST_BACKOFF_MAX_MS=5000  # Maximaler Backoff in Millisekunden

## Netzwerk-Ports
# Interner Backend-Port (Container-intern). Wird auch von docker-compose genutzt.
BACKEND_INTERNAL_PORT=3000
# Host-Port-Mapping für das Backend (z. B. http://localhost:3200)
BACKEND_PORT=3200
# Host-Port für den Nginx-Frontend-Container (Dashboard)
FRONTEND_PORT=8080
# Optional: Direkter Server-Port (lokaler Start ohne Docker). Fällt sonst auf 3000 zurück.
#APP_PORT=3000

## Dashboard Polling (Fallback, wenn SSE nicht verfügbar ist)
# Hinweis: SSE ist die primäre Update-Quelle. Polling dient nur als Fallback.
# Steuerung bevorzugt serverseitig (wirksam ohne Rebuild):
#   THREAD_POLL_ACTIVE_MS, THREAD_POLL_IDLE_MS, THREAD_POLL_HIDDEN_MS, THREAD_POLL_MINIMAL_HIDDEN
#   SKEET_POLL_ACTIVE_MS,  SKEET_POLL_IDLE_MS,  SKEET_POLL_HIDDEN_MS,  SKEET_POLL_MINIMAL_HIDDEN
# Defaults (falls nicht gesetzt): active 30000ms, idle 120000ms, hidden 300000ms, minimalHidden false
#THREAD_POLL_ACTIVE_MS=30000
#THREAD_POLL_IDLE_MS=120000
#THREAD_POLL_HIDDEN_MS=300000
#THREAD_POLL_MINIMAL_HIDDEN=false
#SKEET_POLL_ACTIVE_MS=30000
#SKEET_POLL_IDLE_MS=120000
#SKEET_POLL_HIDDEN_MS=300000
#SKEET_POLL_MINIMAL_HIDDEN=false

# Optional: Build-Zeit-Variablen (Vite). Nur nötig, wenn Polling im Bundle fest verdrahtet werden soll.
#VITE_THREAD_POLL_ACTIVE_MS=30000
#VITE_THREAD_POLL_IDLE_MS=120000
#VITE_THREAD_POLL_HIDDEN_MS=300000
#VITE_THREAD_POLL_MINIMAL_HIDDEN=false
#VITE_SKEET_POLL_ACTIVE_MS=30000
#VITE_SKEET_POLL_IDLE_MS=120000
#VITE_SKEET_POLL_HIDDEN_MS=300000
#VITE_SKEET_POLL_MINIMAL_HIDDEN=false

# Backoff-Strategie für Polling (Client)
# Defaults im Code: Start 10000ms, Max 300000ms, Jitter 0.2, Heartbeat 2000ms
#POLL_BACKOFF_START_MS=10000
#POLL_BACKOFF_MAX_MS=300000
#POLL_JITTER_RATIO=0.2
#POLL_HEARTBEAT_MS=2000
#VITE_POLL_BACKOFF_START_MS=10000
#VITE_POLL_BACKOFF_MAX_MS=300000
#VITE_POLL_JITTER_RATIO=0.2
#VITE_POLL_HEARTBEAT_MS=2000

JSON_BODY_LIMIT_MB=25

# Tenor (GIF Suche) – nur serverseitig
# TENOR_API_KEY=dein_tenor_api_key

# Engagement-Collector: Drosselung abhängig von Client-Präsenz
# Minimaler Abstand zwischen automatischen Engagement-Updates, wenn Clients aktiv sind (ms)
ENGAGEMENT_ACTIVE_MIN_MS=120000
# Minimaler Abstand im Idle-Modus (keine Clients gesehen) (ms); Empfehlung ~20 Minuten
ENGAGEMENT_IDLE_MIN_MS=1200000
# Schwelle, ab der der Server „idle“ annimmt, wenn kein Heartbeat mehr empfangen wurde (ms)
CLIENT_IDLE_THRESHOLD_MS=1200000

# Datenbank & Migrationen
# In Produktion empfehlen wir, das Schema ausschließlich per Migrationen zu verwalten
# und sequelize.sync() zu deaktivieren. Steuerung über DB_SYNC:
#   DB_SYNC=false  -> sync() wird übersprungen (empfohlen für Prod)
#   DB_SYNC=true   -> sync() wird ausgeführt (default in Dev)
# Optional: expliziten SQLite-Speicherpfad setzen (ansonsten nutzt die App ./data/bluesky_campaign_<env>.sqlite)
# Der Ordner wird bei Bedarf automatisch erstellt
#SQLITE_STORAGE=./data/app.sqlite

# Upload-/Temp-Verzeichnisse (werden bei Bedarf automatisch angelegt)
#UPLOAD_DIR=./data/uploads
#TEMP_UPLOAD_DIR=./data/temp

# Laufzeit-.env an benutzerdefiniertem Ort verwenden (z. B. bei Deployment)
#ENV_PATH=./config/.env

#DB_SYNC=false

# Hinweis zu Sicherheit & Quoting
# - Setze .env-Dateirechte restriktiv (z. B. chmod 600 .env).
# - Werte ohne Anführungszeichen eintragen; Leerzeichen vermeiden oder escapen.
